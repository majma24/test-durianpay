stages:
  - build_image
  - deploy

variables:
  IMAGE: webserver
  VERSION: latest

build:
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - apk add --no-cache aws-cli 
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

  script: 
    - docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE}:${VERSION} .
    - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE}:${VERSION}

deploy:
  stage: deploy
  before_script:
    - apt-get update
    - apt-get install -y sshpass openssh-client
  script:
    - echo "Setting up SSH access"
    - mkdir -p ~/.ssh
    - echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    - echo "SSH into EC2 and deploy Docker container"
    - |
      ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST <<- EOF
        set -e

        # Ensure AWS CLI is installed
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found, installing..."
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi

        # Configure AWS CLI and log in to ECR
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_REGION
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

        # Stop and remove any existing container
        docker stop ${IMAGE} || true
        docker rm ${IMAGE} || true

        # Pull the new Docker image
        docker pull ${ECR_REPOSITORY}/${IMAGE}:${VERSION}
       
        # Run the new Docker container
        docker run -d -p 80:80 --name ${ECR_REPOSITORY}/${IMAGE}:${VERSION}
      EOF
  only:
    - main
